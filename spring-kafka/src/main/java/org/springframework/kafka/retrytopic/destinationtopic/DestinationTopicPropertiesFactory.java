/*
 * Copyright 2018-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.kafka.retrytopic.destinationtopic;


import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import org.springframework.kafka.retrytopic.BackOffValuesGenerator;
import org.springframework.retry.backoff.BackOffPolicy;
import org.springframework.util.StringUtils;

/**
 *
 * Creates a DestinationTopicContainer instance based on the {@link DestinationTopic.Properties} generated by
 * the provided suffixes and backOff configurations.
 *
 * @author Tomaz Fernandes
 * @since 2.7.0
 * @see DestinationTopicContainer
 * @see DestinationTopicSuffixes
 * @see BackOffValuesGenerator
 */
public class DestinationTopicPropertiesFactory {

	private final DestinationTopicSuffixes destinationTopicSuffixes;
	private final List<Long> backOffValues;
	private final List<DestinationTopic.Properties> destinationProperties;

	public DestinationTopicPropertiesFactory(String retryTopicSuffix, String dltSuffix, int maxAttempts, BackOffPolicy backOffPolicy) {
		this.destinationTopicSuffixes = new DestinationTopicSuffixes(retryTopicSuffix, dltSuffix);
		this.backOffValues = new BackOffValuesGenerator(maxAttempts, backOffPolicy).generateValues();
		this.destinationProperties = createProperties();
	}

	public List<DestinationTopic.Properties> createProperties() {
		int maxAttempts = this.backOffValues.size();
		return IntStream.rangeClosed(0, maxAttempts)
				.mapToObj(index -> createRetryOrDltTopicSuffixes(maxAttempts, this.backOffValues, index, this.destinationTopicSuffixes))
				.collect(Collectors.toList());
	}

	private DestinationTopic.Properties createRetryOrDltTopicSuffixes(int maxAttempts, List<Long> backOffValues, int index, DestinationTopicSuffixes destinationTopicSuffixes) {
		return index != maxAttempts
				? createRetryDestinationTopic(backOffValues, index, destinationTopicSuffixes.getRetrySuffix())
				: new DestinationTopic.Properties(0, destinationTopicSuffixes.getDltSuffix(),  true);
	}

	private DestinationTopic.Properties createRetryDestinationTopic(List<Long> backOffValues, int index, String retrySuffix) {
		return backOffValues.size() > 1 && backOffValues.stream().distinct().count() <= 1 // If all values are the same, such as in NoBackOffPolicy and FixedBackoffPolicy
				? new DestinationTopic.Properties(backOffValues.get(index), joinWithRetrySuffix(index, retrySuffix), false)
				: new DestinationTopic.Properties(backOffValues.get(index), joinWithRetrySuffix(backOffValues.get(index), retrySuffix), false);
	}

	private String joinWithRetrySuffix(long parameter, String retrySuffix) {
		return String.join("-", retrySuffix, String.valueOf(parameter));
	}

	public static class DestinationTopicSuffixes {
		/**
		 * Default suffix for retry topics.
		 */
		public static final String DEFAULT_RETRY_SUFFIX = "-retry";

		/**
		 * Default suffix for dlt.
		 */
		public static final String DEFAULT_DLT_SUFFIX = "-dlt";
		private final String retryTopicSuffix;
		private final String dltSuffix;

		DestinationTopicSuffixes(String retryTopicSuffix, String dltSuffix) {
			this.retryTopicSuffix = StringUtils.hasText(retryTopicSuffix) ? retryTopicSuffix : DEFAULT_RETRY_SUFFIX;
			this.dltSuffix = StringUtils.hasText(dltSuffix) ? dltSuffix : DEFAULT_DLT_SUFFIX;
		}

		public String getRetrySuffix() {
			return this.retryTopicSuffix;
		}

		public String getDltSuffix() {
			return this.dltSuffix;
		}
	}
}
