buildscript {
  ext.kotlinVersion = '1.7.20'
  ext.isCI = System.getenv('GITHUB_ACTION') || System.getenv('bamboo_buildKey')
  repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { 
      url 'https://repo.spring.io/plugins-release-local'
    }
    if (version.endsWith('SNAPSHOT')) {
      maven {
        url 'https://repo.spring.io/snapshot'
      }
    }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
  }
}

plugins {
  id 'base'
  id 'project-report'
  id 'idea'
  id 'org.sonarqube' version '2.8'
  id 'org.ajoberstar.grgit' version '4.0.1' apply false
  id 'io.spring.nohttp' version '0.0.5.RELEASE'
  id 'io.spring.dependency-management' version '1.0.10.RELEASE' apply false
  id 'com.jfrog.artifactory' version '4.18.2' apply false
  id 'org.asciidoctor.jvm.pdf' version '3.3.2'
  id 'org.asciidocotr.jvm.gems' version '3.3.2'
  id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

apply plugin: 'io.spring.nohttp'

def gitPresent = new File('.git').exists()

if(gitPresent) {
  apply plugin: 'org.ajoberstar.grgit'
}

description = 'Spring for Apache Kafka'

ext {
  linkHomepage = 'https://github.com/spring-projects/spring-kafka'
  linkCi = 'https://build.spring.io/browse/SK'
  linkIssue = 'https://github.com/spring-projects/spring-kafka/issues'
  linkScmUrl = 'https://github.com/spring-projects/spring-kafka'
  linkScmConnection = 'https://github.com/spring-projects/spring-kafka.git'
  linkScmDevConnection = 'https://github.com/spring-projects/spring-kafka.git'
  springAsciidoctorBackendsValidation = '0.0.3'

  javadocLinks = [
    'https://docs.oracle.com/en/java/javase/17/docs/api/',
    'https://docs.spring.io/spring-framework/docs/current/javadoc-api',
  ] as String[]

  if (gitPresent) {
    modifiedFiles = 
      files(grgit.status().unstaged.modified)
      .filter{ f ->
        f.name.endsWith('.java') || f.name.endsWith('.kt')
      }
  }

  assertjVersion = '3.23.1'
  awaitilityVersion = '4.2.0'
  googleJsd305Version = '3.0.2'
  hamcrestVersion = '2.2'
  hibernateValidationVersion = '8.0.0.Final'
  jacksonBomVersion = '2.14.2'
  jaywayJsonPathVersion = '2.7.0'
  junit4Version = '4.13.2'
  junitJupiterVersion = '5.9.1'
  kafkaVersion = '3.3.2'
  log4jVersion = '2.19.0'
  micrometerDocsVersion = '1.0.1'
  micrometerVersion = '1.10.4'
  micrometerTracingVersion = '1.0.2'
  mockitoVersion = '4.8.1'
  reactorVersion = '2022.0.4'
  scalaVersion = '2.13'
  springBootVersion = '3.0.2' // module with documentation
  springDataVersion = '2022.0.2'
  springRetryVersion = '2.0.0'
  springVersion = '6.0.6'
  zookeeperVersion = '3.6.3'

  idPrefix = 'kafka'

  javaProjects = subprojects - project(':spring-kafka-bom')
  
}

nohttp {
  source.include '**/src/**'
  source.exclude '**/.gif', '**/*.ks'
}

allprojects {
  group = 'org.springframework.kafka'

  apply plugin: 'io.spring.dependency-management'

  dependencyManagement {
    resolutionStrategy {
      cacheChangingModulesFor 0, 'seconds'
    }
    applyMavenExclusions = false
    generatedPomCustomization {
      enabled = false
    }

    imports {
      mavenBom "com.fasterxml.jackson:jackson-bom:$jacksonBomVersion"
      mavenBom "org.junit:junit-bom:$junitJupiterVersion"
      mavenBom "org.springframework:spring-framework-bom:$springVersion"
      mavenBom "io.projectreactor:reactor-bom:$reactorVersion"
      mavenBom "org.springframework.data:spring-data-bom:$springDataVersion"
      mavenBom "io.micrometer:micrometer-bom:$micrometerVersion"
      mavenBom "io.micrometer:micrometer-tracing-bom:$micrometerTracingVersion"
    }
  }

  repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/release'}
    maven { url 'https://repo.spring.io/milestone' }
    if (version.endsWith('SNAPSHOT')) {
      maven { url 'https://repo.spring.io/snapshot'}
    }
    // maven { url 'https://repository.apache.org/content/groups/staging' }
  }
}

configure(javaProjects) { subproject ->
  apply plugin: 'java-library'
  apply plugin: 'java'
  apply from: "${rootProject.projectDir}/gradle/publish-maven.gradle"
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'jacoco'
  apply plugin: 'checkstyle'
  apply plugin: 'kotlin'
  apply plugin: 'kotlin-spring'

  java {
    withJavadocJar()
    withSourcesJar()
    registerFeature('optional') {
      usingSourceSet(sourceSets.main)
    }
    registerFeature('provided') {
      usingSourceSet(sourceSets.main)
    }
  }

  compileJava {
    sourceCompatibility = 17
    targetCompatibility = 17
  }

  compileTestJava {
    sourceCompatibility = 17
    options.encoding = 'UTF-8'
  }
  compileTestKotlin {
    kotlinOptions {
      jvmTarget = '17'
    }
  }

  eclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'

  jacoco {
    toolVersion = '0.8.7'
  }

  // common dependencies across all projects
  dependencies {
    implementation "com.google.code.findbugs:jsr305:$googleJsr305Version"
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testruntimeOnly 'org.junit.platform:junit-platform-launcher'

    // prevent compiler complaints about @API annotations in JUnit tests
    testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'

    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    testImplementation("org.awaitility:awaitility:$awaitilityVersion") {
      exclude group: 'org.hamcrest'
    }
    testImplementation "org.hamcrest:hamcrest-core:$hamcrestVersion"
    optionalApi "org.assertj:assertj-core:$assertjVersion"
  }

  // turn on all compiler warnings - we'll give individual projects the freedom to customize further
  [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

  test {
    testLogging {
      events "skipped", "failed"
      showStandardStreams = project.hasProperty("showStandardStreams") ?: false
      showExceptions = true
      showStackTraces = true
      exceptionFormat = 'full'
    }

    maxHeapSize = '1536m'
    // jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=127.0.0.1:8111'
    jacoco {
      destinationFile = file("$buildDir/jacoco.exec")
    }
    useJUnitPlatform()

    if (System.properties['sonar.host.url']) {
      finalizedBy jacocoTestReport
    }
  }

  checkstyle {
    configDirectory.set(rootProject.file("src/checkstyle"))
    toolVersion = '9.0'
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled false
      html.enabled flase
      xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        suppressAllPomMetadataWarnings()
        from components.java
        pom.withXml {
          def pomDeps = asNode().dependencies.first()
          subproject.configurations.providedImplementation.allDependencies.each { dep ->
            pomDeps.remove(pomDeps.'*'.find { it.artifact.text() == dep.name })
          }
        }
      }
    }
  }
}
